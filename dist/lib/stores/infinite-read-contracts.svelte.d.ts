import { type ConfigParameter, type FuncOrVal, type InfiniteQueryParameter, type RuneReturnType } from "../types";
import type { InfiniteQueryObserverResult } from "@tanstack/svelte-query";
import type { Config, ReadContractsErrorType, ResolvedRegister } from "@wagmi/core";
import { type InfiniteReadContractsData, type InfiniteReadContractsOptions, type InfiniteReadContractsQueryFnData, type InfiniteReadContractsQueryKey } from "@wagmi/core/query";
import type { ContractFunctionParameters } from "viem";
export type CreateInfiniteContractReadsParameters<contracts extends readonly unknown[] = readonly ContractFunctionParameters[], allowFailure extends boolean = true, config extends Config = Config, pageParam = unknown, selectData = InfiniteReadContractsData<contracts, allowFailure>> = FuncOrVal<InfiniteReadContractsOptions<contracts, allowFailure, pageParam, config> & ConfigParameter<config> & InfiniteQueryParameter<InfiniteReadContractsQueryFnData<contracts, allowFailure>, ReadContractsErrorType, selectData, InfiniteReadContractsData<contracts, allowFailure>, InfiniteReadContractsQueryKey<contracts, allowFailure, pageParam, config>, pageParam>>;
export type CreateInfiniteContractReadsReturnType<contracts extends readonly unknown[] = readonly ContractFunctionParameters[], allowFailure extends boolean = true, selectData = InfiniteReadContractsData<contracts, allowFailure>> = RuneReturnType<InfiniteQueryObserverResult<selectData, ReadContractsErrorType>>;
export declare function createInfiniteReadContracts<const contracts extends readonly unknown[], allowFailure extends boolean = true, config extends Config = ResolvedRegister["config"], pageParam = unknown, selectData = InfiniteReadContractsData<contracts, allowFailure>>(parameters: CreateInfiniteContractReadsParameters<contracts, allowFailure, config, pageParam, selectData>): CreateInfiniteContractReadsReturnType<contracts, allowFailure, selectData>;
