import { type ConfigParameter, type FuncOrVal, type QueryParameter, type RuneReturnType } from "../types";
import type { QueryObserverResult } from "@tanstack/svelte-query";
import type { Config, ResolvedRegister, SimulateContractErrorType } from "@wagmi/core";
import { type SimulateContractData, type SimulateContractOptions, type SimulateContractQueryFnData, type SimulateContractQueryKey } from "@wagmi/core/query";
import type { Abi, ContractFunctionArgs, ContractFunctionName } from "viem";
export type CreateSimulateContractParameters<abi extends Abi | readonly unknown[] = Abi, functionName extends ContractFunctionName<abi, "nonpayable" | "payable"> = ContractFunctionName<abi, "nonpayable" | "payable">, args extends ContractFunctionArgs<abi, "nonpayable" | "payable", functionName> = ContractFunctionArgs<abi, "nonpayable" | "payable", functionName>, config extends Config = Config, chainId extends config["chains"][number]["id"] | undefined = undefined, selectData = SimulateContractData<abi, functionName, args, config, chainId>> = FuncOrVal<SimulateContractOptions<abi, functionName, args, config, chainId> & ConfigParameter<config> & QueryParameter<SimulateContractQueryFnData<abi, functionName, args, config, chainId>, SimulateContractErrorType, selectData, SimulateContractQueryKey<abi, functionName, args, config, chainId>>>;
export type CreateSimulateContractReturnType<abi extends Abi | readonly unknown[] = Abi, functionName extends ContractFunctionName<abi, "nonpayable" | "payable"> = ContractFunctionName<abi, "nonpayable" | "payable">, args extends ContractFunctionArgs<abi, "nonpayable" | "payable", functionName> = ContractFunctionArgs<abi, "nonpayable" | "payable", functionName>, config extends Config = Config, chainId extends config["chains"][number]["id"] | undefined = undefined, selectData = SimulateContractData<abi, functionName, args, config, chainId>> = RuneReturnType<QueryObserverResult<selectData, SimulateContractErrorType>>;
export declare function createSimulateContract<const abi extends Abi | readonly unknown[], functionName extends ContractFunctionName<abi, "nonpayable" | "payable">, args extends ContractFunctionArgs<abi, "nonpayable" | "payable", functionName>, config extends Config = ResolvedRegister["config"], chainId extends config["chains"][number]["id"] | undefined = undefined, selectData = SimulateContractData<abi, functionName, args, config, chainId>>(parameters?: CreateSimulateContractParameters<abi, functionName, args, config, chainId, selectData>): CreateSimulateContractReturnType<abi, functionName, args, config, chainId, selectData>;
