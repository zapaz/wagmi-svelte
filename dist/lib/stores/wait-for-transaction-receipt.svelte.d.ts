import { type ConfigParameter, type FuncOrVal, type QueryParameter, type RuneReturnType } from "../types";
import type { QueryObserverResult } from "@tanstack/svelte-query";
import type { Config, ResolvedRegister, WaitForTransactionReceiptErrorType } from "@wagmi/core";
import { type WaitForTransactionReceiptData, type WaitForTransactionReceiptOptions, type WaitForTransactionReceiptQueryFnData, type WaitForTransactionReceiptQueryKey } from "@wagmi/core/query";
import type { Evaluate } from "@wagmi/core/internal";
export type CreateWaitForTransactionReceiptParameters<config extends Config = Config, chainId extends config["chains"][number]["id"] = config["chains"][number]["id"], selectData = WaitForTransactionReceiptData<config, chainId>> = FuncOrVal<Evaluate<WaitForTransactionReceiptOptions<config, chainId> & ConfigParameter<config> & QueryParameter<WaitForTransactionReceiptQueryFnData<config, chainId>, WaitForTransactionReceiptErrorType, selectData, WaitForTransactionReceiptQueryKey<config, chainId>>>>;
export type CreateWaitForTransactionReceiptReturnType<config extends Config = Config, chainId extends config["chains"][number]["id"] = config["chains"][number]["id"], selectData = WaitForTransactionReceiptData<config, chainId>> = RuneReturnType<QueryObserverResult<selectData, WaitForTransactionReceiptErrorType>>;
export declare function createWaitForTransactionReceipt<config extends Config = ResolvedRegister["config"], chainId extends config["chains"][number]["id"] = config["chains"][number]["id"], selectData = WaitForTransactionReceiptData<config, chainId>>(parameters?: CreateWaitForTransactionReceiptParameters<config, chainId, selectData>): CreateWaitForTransactionReceiptReturnType<config, chainId, selectData>;
